@using InfiniteScroller.Extensions;
@model InfiniteScroller.Models.ScrollerPayload<InfiniteScroller.Controllers.SampleItem>

@{
    ViewBag.Title = "title";
}

<style>
    .sortable span {
        text-decoration : underline;
        cursor : pointer;
    }

    .sortable i[class*=icon] {
        display : none;
    }    

    .sortable.currentsort.asc .icon-chevron-up {
        display : inline-block;
    }

    .sortable.currentsort.desc .icon-chevron-down {
        display : inline-block;
    }

    .scrollcontainer {
        height: 400px;
        position: relative;
        overflow: visible;
    }

    .scrollstatus {
        position: absolute;
        bottom: -24px;
        left: 0px;
        color: white;
        z-index: 1;
        border-radius: 4px;
        background-color: gray;
        width: 100%;
    }

    .statusinner {
        padding : 3px 6px;
    }
    
    .scrollwindow {
        height: 400px;
        overflow-y: scroll;
        zoom : 1;
    }

    .detachedheader {
        position : absolute;
        top : 0;
        left : 0;
        background-color : white;
    }
    
    .jumpto {
        cursor: pointer;
    }
</style>

<h1>Infinite Scrollums</h1>

<div class="scrollcontainer">
    <div class="scrollwindow">
        <div style="zoom : 1">
            <table data-bind="infinitescroll : scrollermodel, with : scrollermodel" class="table table-striped">
                <thead data-bind="fixedtableheader : {}">
                    <tr data-bind="foreach : columns">
                        <th data-bind="column : $data, css : { sortable : $data.sortable || false, currentsort : $data.currentsort || false, asc : $data.ascending || false, desc : $data.descending || false }, click : $data.click || null"></th>
                    </tr>
                </thead>
                <tbody data-bind="foreach : data">
                    <tr>
                        <td data-bind="html : $index"></td>
                        <td data-bind="html : Name"></td>
                        <td data-bind="html : Group"></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="scrollstatus">
        <div class="statusinner">
            Total: <span data-bind="html : scrollermodel.filter.total"></span>
            [
            <!-- ko foreach : ko.computed(function(){ var x = []; x.length = 4; return x }) -->
            <span class="jumpto" data-bind="html : (1 + $index()) * ($parent.scrollermodel.filter.total() / 5), click : function(data, ev) { $(ev.currentTarget).parents('.scrollcontainer').find('.scrollwindow').trigger('jumpto', ((1 + $index()) * ($parent.scrollermodel.filter.total() / 5)) -1) }"></span>
            <!-- /ko -->
            ]
        </div>
    </div>
</div>

<script type="text/javascript">
    function InfiniteScrollViewModel(uri, payload) {
        this.filter = $.extend({}, ko.bindingHandlers.infinitescroll.defaultFilter);
        this.filter.skip = payload.Data.length;
        this.filter.take = payload.Data.length;
        this.filter.total(payload.Total);
        this.filter.sortby('Name');
        this.container = $('.scrollwindow');
        this.columns = [
            new ko.bindingHandlers.infinitescroll.Column({ label : 'Index', sortable : false }),
            new ko.bindingHandlers.infinitescroll.Column({ label : 'Column A', sortable : true, sortkey : 'Name', filter : this.filter }),
            new ko.bindingHandlers.infinitescroll.Column({ label : 'Column B', sortable : false })
        ];

        this.throttle = 600;
        this.uri = uri;
        
        this.data = ko.observableArray(payload.Data);
    }

    var viewModel = {
        scrollermodel: new InfiniteScrollViewModel('@Url.Action("GetData")', @Html.ToJson(Model))
    };

    ko.applyBindings(viewModel, $('.scrollcontainer')[0]);
</script>