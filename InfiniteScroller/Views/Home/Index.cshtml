@using InfiniteScroller.Extensions;
@model IEnumerable<InfiniteScroller.Controllers.SampleItem>

@{
    ViewBag.Title = "title";
}

<style>
    .sortable span {
        text-decoration : underline;
        cursor : pointer;
    }

    .sortable i[class*=icon] {
        display : none;
    }    

    .sortable.currentsort.asc .icon-chevron-up {
        display : inline-block;
    }

    .sortable.currentsort.desc .icon-chevron-down {
        display : inline-block;
    }
    
</style>

<table id="thetable" data-bind="infinitescroll : scrollermodel, with : scrollermodel" class="table table-striped">
    <thead>
        <tr data-bind="foreach : columns">
            <th data-bind="column : $data, css : { sortable : sortable, currentsort : currentsort(), asc : ascending(), desc : descending() }, click : click"></th>
        </tr>
    </thead>
    <tbody data-bind="foreach : data">
        <tr>
            <td data-bind="html : $index"></td>
            <td data-bind="html : Name"></td>
            <td data-bind="html : Group"></td>            
        </tr>
    </tbody>
</table>

<script type="text/javascript">
    function InfiniteScrollViewModel(uri, payload) {
        this.filter = $.extend({}, ko.bindingHandlers.infinitescroll.defaultFilter);
        this.filter.skip = payload.length;
        this.filter.take = payload.length;
        this.filter.sortby('Name');
        this.columns = [
            new ko.bindingHandlers.infinitescroll.Column('Index', false, null, this),
            new ko.bindingHandlers.infinitescroll.Column('Column A', true, 'Name', this),
            new ko.bindingHandlers.infinitescroll.Column('Column B', false, null, this)
        ];

        this.throttle = 600;
        this.uri = uri

        this.data = ko.observableArray(payload);
    }

    var viewModel = {
        scrollermodel: new InfiniteScrollViewModel('@Url.Action("GetData")', @Html.ToJson(Model))
    };

    ko.applyBindings(viewModel, $('thetable')[0]);
</script>